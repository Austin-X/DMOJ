import java.io.*;
import java.util.*;

public class Mynerva {
	static class Node {
		int dest, brightness;
		Node(int dest, int brightness) {
			this.dest = dest;
			this.brightness = brightness;
		}
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int n = Integer.parseInt(st.nextToken()), m = Integer.parseInt(st.nextToken());
		@SuppressWarnings("unchecked")
		ArrayList<Node>[] adj = new ArrayList[n + 1];
		for (int i = 1; i <= n; i ++) adj[i] = new ArrayList<Node>();
		
		for (int i = 0; i < m; i ++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken()), y = Integer.parseInt(st.nextToken()), z = Integer.parseInt(st.nextToken());
			adj[x].add(new Node(y, z));
			adj[y].add(new Node(x, z));
		}
		
		int[] dis = new int[n + 1], maxBrightness = new int[n + 1], minBrightness = new int[n + 1];
		Arrays.fill(dis, Integer.MAX_VALUE);
		Queue<Node> q = new LinkedList<Node>();
		q.add(new Node(1, 0));
		dis[1] = 0;
		
		while (!q.isEmpty()) {
			Node cur = q.poll();
			for (Node x : adj[cur.dest]) {
				if (dis[cur.dest] + 1 < dis[x.dest]) { dis[x.dest] = dis[cur.dest] + 1; maxBrightness[x.dest] = maxBrightness[cur.dest] + x.brightness; minBrightness[x.dest] = minBrightness[cur.dest] + x.brightness; q.add(x); }
				else if (dis[cur.dest] + 1 == dis[x.dest]) { maxBrightness[x.dest] = Math.max(maxBrightness[x.dest], maxBrightness[cur.dest] + x.brightness); minBrightness[x.dest] = Math.min(minBrightness[x.dest], minBrightness[cur.dest] + x.brightness); }
			}
		}
		
		int Q = Integer.parseInt(br.readLine());
		for (int i = 0; i < Q; i ++) {
			st = new StringTokenizer(br.readLine());
			int d = Integer.parseInt(st.nextToken());
			String colour = st.nextToken();
			System.out.println(colour.equals("White") ? dis[d] + " " + maxBrightness[d] : dis[d] + " " + minBrightness[d]);
		}
	}
}
